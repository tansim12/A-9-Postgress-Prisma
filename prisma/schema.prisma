// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid())
  password           String
  name               String
  email              String        @unique
  status             UserStatus    @default(active)
  isDelete           Boolean       @default(false)
  role               UserRole      @default(user)
  lastPasswordChange DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  userProfile        UserProfile[]
  shop               Shop?
  shopReview         ShopReview[]
  shopFollow         ShopFollow[]

  @@map("users")
}

model UserProfile {
  id            String     @id @default(uuid())
  email         String     @unique
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  profilePhoto  String?
  coverPhoto    String?
  bio           String?
  gender        Gender?
  contactNumber String?
  status        UserStatus @default(active)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("userProfiles")
}

model Shop {
  id            String       @id @default(uuid())
  name          String
  vendorId      String       @unique
  vendor        User         @relation(fields: [vendorId], references: [id])
  description   String?
  averageRating Int          @default(0)
  isDelete      Boolean      @default(false)
  logo          String?
  shopType      String?
  address       String?
  contactNumber String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  shopReview    ShopReview[]
  shopFollow    ShopFollow[]

  @@map("shops")
}

model ShopReview {
  userId    String   
  user      User     @relation(fields: [userId], references: [id])
  shopId    String   
  shop      Shop     @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  details  String
  rating   Int?
  isDelete Boolean @default(false)

  @@id([userId, shopId])
  @@map("shopReviews")
}

model ShopFollow {
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDelete  Boolean  @default(false)

  @@id([userId, shopId])
  @@map("shopFollows")
}

enum UserRole {
  user
  admin
  vendor
}

enum UserStatus {
  active
  blocked
}

enum Gender {
  male
  female
}
